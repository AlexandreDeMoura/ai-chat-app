{"ast":null,"code":"var _jsxFileName = \"/Users/alexandredemoura/Desktop/dev/ai-chat-app/client/src/AuthContext.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { auth, googleProvider } from './firebase';\nimport { signInWithPopup, signOut, onAuthStateChanged } from 'firebase/auth';\nimport axios from 'axios';\n\n// Define the shape of the AuthContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the AuthContext with a default value of undefined.\n// Consumers should handle the undefined case.\nexport const AuthContext = /*#__PURE__*/createContext(undefined);\n\n// Define the props for AuthProvider\n\n// AuthProvider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [conversations, setConversations] = useState([]);\n\n  // New function to fetch conversations\n  const fetchConversations = async token => {\n    try {\n      const response = await axios.get('/api/conversations', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setConversations(response.data);\n    } catch (error) {\n      console.error('Error fetching conversations:', error);\n      setConversations([]);\n    }\n  };\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async currentUser => {\n      setUser(currentUser);\n      if (currentUser) {\n        const token = await currentUser.getIdToken();\n        await fetchConversations(token);\n      } else {\n        setConversations([]);\n      }\n      setLoading(false);\n    });\n\n    // Cleanup subscription on unmount\n    return () => unsubscribe();\n  }, []);\n\n  // Sign in with Google\n  const signIn = async () => {\n    try {\n      await signInWithPopup(auth, googleProvider);\n    } catch (error) {\n      console.error('Error signing in with Google', error);\n      // Optionally, you can add error handling logic here\n    }\n  };\n\n  // Log out the current user\n  const logOut = async () => {\n    try {\n      await signOut(auth);\n      setConversations([]);\n    } catch (error) {\n      console.error('Error signing out', error);\n      // Optionally, you can add error handling logic here\n    }\n  };\n\n  // Get the current user's ID token\n  const getToken = async () => {\n    if (user) {\n      return await user.getIdToken();\n    }\n    return null;\n  };\n\n  // Update the conversations state\n  const updateConversations = newConversations => {\n    setConversations(newConversations);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      signIn,\n      logOut,\n      getToken,\n      loading,\n      conversations,\n      updateConversations\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"t7yEt4K4Mz4MtqFqweLvlDK6lyM=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","auth","googleProvider","signInWithPopup","signOut","onAuthStateChanged","axios","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","loading","setLoading","conversations","setConversations","fetchConversations","token","response","get","headers","Authorization","data","error","console","unsubscribe","currentUser","getIdToken","signIn","logOut","getToken","updateConversations","newConversations","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alexandredemoura/Desktop/dev/ai-chat-app/client/src/AuthContext.tsx"],"sourcesContent":["import React, {\n    createContext,\n    useState,\n    useEffect,\n    ReactNode,\n    FC,\n} from 'react';\nimport { auth, googleProvider } from './firebase';\nimport {\n    signInWithPopup,\n    signOut,\n    User,\n    onAuthStateChanged,\n} from 'firebase/auth';\nimport { Conversation } from './types/types';\nimport axios from 'axios';\n\n// Define the shape of the AuthContext\nexport interface AuthContextType {\n    user: User | null;\n    signIn: () => Promise<void>;\n    logOut: () => Promise<void>;\n    getToken: () => Promise<string | null>;\n    loading: boolean;\n    conversations: Conversation[];\n    updateConversations: (newConversations: Conversation[]) => void;\n}\n\n// Create the AuthContext with a default value of undefined.\n// Consumers should handle the undefined case.\nexport const AuthContext = createContext<AuthContextType | undefined>(\n    undefined\n);\n\n// Define the props for AuthProvider\ninterface AuthProviderProps {\n    children: ReactNode;\n}\n\n// AuthProvider component\nexport const AuthProvider: FC<AuthProviderProps> = ({ children }) => {\n    const [user, setUser] = useState<User | null>(null);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [conversations, setConversations] = useState<Conversation[]>([]);\n\n    // New function to fetch conversations\n    const fetchConversations = async (token: string) => {\n        try {\n            const response = await axios.get('/api/conversations', {\n                headers: { Authorization: `Bearer ${token}` }\n            });\n            setConversations(response.data);\n        } catch (error) {\n            console.error('Error fetching conversations:', error);\n            setConversations([]);\n        }\n    };\n\n    useEffect(() => {\n        const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {\n            setUser(currentUser);\n            if (currentUser) {\n                const token = await currentUser.getIdToken();\n                await fetchConversations(token);\n            } else {\n                setConversations([]);\n            }\n            setLoading(false);\n        });\n\n        // Cleanup subscription on unmount\n        return () => unsubscribe();\n    }, []);\n\n    // Sign in with Google\n    const signIn = async (): Promise<void> => {\n        try {\n            await signInWithPopup(auth, googleProvider);\n        } catch (error) {\n            console.error('Error signing in with Google', error);\n            // Optionally, you can add error handling logic here\n        }\n    };\n\n    // Log out the current user\n    const logOut = async (): Promise<void> => {\n        try {\n            await signOut(auth);\n            setConversations([]);\n        } catch (error) {\n            console.error('Error signing out', error);\n            // Optionally, you can add error handling logic here\n        }\n    };\n\n    // Get the current user's ID token\n    const getToken = async (): Promise<string | null> => {\n        if (user) {\n            return await user.getIdToken();\n        }\n        return null;\n    };\n\n    // Update the conversations state\n    const updateConversations = (\n        newConversations: Conversation[]\n    ): void => {\n        setConversations(newConversations);\n    };\n\n    return (\n        <AuthContext.Provider\n            value={{\n                user,\n                signIn,\n                logOut,\n                getToken,\n                loading,\n                conversations,\n                updateConversations,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}