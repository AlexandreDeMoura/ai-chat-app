{"ast":null,"code":"var _jsxFileName = \"/Users/alexandredemoura/Desktop/dev/ai-chat-app/client/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport Sidebar from './components/Sidebar';\nimport Home from './screens/Home';\nimport CurrentConversation from './screens/CurrentConversations';\nimport MessageInput from './components/MessageInput';\nimport { ThemeContext } from './context/ThemeContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const {\n    theme\n  } = useContext(ThemeContext);\n  const [conversations, setConversations] = useState(() => {\n    const savedConversations = localStorage.getItem('conversations');\n    return savedConversations ? JSON.parse(savedConversations) : [];\n  });\n  const [currentConversation, setCurrentConversation] = useState(null);\n  const [showHome, setShowHome] = useState(true);\n  useEffect(() => {\n    const savedConversations = localStorage.getItem('conversations');\n    console.log(savedConversations);\n    if (savedConversations) {\n      const parsedConversations = JSON.parse(savedConversations, (key, value) => {\n        if (key === 'lastUpdated') {\n          return new Date(value);\n        }\n        return value;\n      });\n      setConversations(parsedConversations);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('conversations', JSON.stringify(conversations, (key, value) => {\n      if (key === 'lastUpdated') {\n        return value;\n      }\n      return value;\n    }));\n  }, [conversations]);\n  const handleSubmit = input => {\n    if (input.trim()) {\n      const newMessage = {\n        text: input,\n        isUser: true\n      };\n      const currentTime = new Date();\n      if (currentConversation) {\n        setConversations(prevConversations => prevConversations.map(conv => conv.id === currentConversation ? {\n          ...conv,\n          messages: [...conv.messages, newMessage],\n          lastUpdated: currentTime\n        } : conv));\n        simulateAIResponse(currentConversation);\n      } else {\n        const newConversationId = Date.now().toString();\n        const newConversation = {\n          id: newConversationId,\n          title: input.slice(0, 30),\n          messages: [newMessage],\n          lastUpdated: currentTime\n        };\n        setConversations(prev => [...prev, newConversation]);\n        setCurrentConversation(newConversationId);\n        simulateAIResponse(newConversationId);\n      }\n      setShowHome(false);\n    }\n  };\n  const simulateAIResponse = convId => {\n    setTimeout(() => {\n      const aiResponse = {\n        text: \"This is a simulated AI response.\",\n        isUser: false\n      };\n      const currentTime = new Date();\n      setConversations(prevConversations => prevConversations.map(conv => conv.id === convId ? {\n        ...conv,\n        messages: [...conv.messages, aiResponse],\n        lastUpdated: currentTime\n      } : conv));\n    }, 1000);\n  };\n  const startNewChat = () => {\n    setCurrentConversation(null);\n    setShowHome(true);\n  };\n  const selectConversation = id => {\n    setCurrentConversation(id);\n    setShowHome(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `flex h-screen overflow-hidden ${theme === 'dark' ? 'bg-gray-900' : 'bg-white'}`,\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      conversations: conversations,\n      currentConversation: currentConversation,\n      startNewChat: startNewChat,\n      selectConversation: selectConversation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 flex flex-col\",\n      children: [showHome ? /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(CurrentConversation, {\n        conversation: conversations.find(conv => conv.id === currentConversation)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        onSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"9jJ6dPrLH5IG8mkKoWvh6xZBVOs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useContext","Sidebar","Home","CurrentConversation","MessageInput","ThemeContext","jsxDEV","_jsxDEV","App","_s","theme","conversations","setConversations","savedConversations","localStorage","getItem","JSON","parse","currentConversation","setCurrentConversation","showHome","setShowHome","console","log","parsedConversations","key","value","Date","setItem","stringify","handleSubmit","input","trim","newMessage","text","isUser","currentTime","prevConversations","map","conv","id","messages","lastUpdated","simulateAIResponse","newConversationId","now","toString","newConversation","title","slice","prev","convId","setTimeout","aiResponse","startNewChat","selectConversation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","conversation","find","onSubmit","_c","$RefreshReg$"],"sources":["/Users/alexandredemoura/Desktop/dev/ai-chat-app/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { Conversation, Message as MessageType } from './types/types';\nimport Sidebar from './components/Sidebar';\nimport Home from './screens/Home';\nimport CurrentConversation from './screens/CurrentConversations';\nimport MessageInput from './components/MessageInput';\nimport { ThemeContext } from './context/ThemeContext';\n\nconst App: React.FC = () => {\n  const { theme } = useContext(ThemeContext);\n  const [conversations, setConversations] = useState<Conversation[]>(() => {\n    const savedConversations = localStorage.getItem('conversations');\n    return savedConversations ? JSON.parse(savedConversations) : [];\n  });\n  const [currentConversation, setCurrentConversation] = useState<string | null>(null);\n  const [showHome, setShowHome] = useState(true);\n\n  useEffect(() => {\n    const savedConversations = localStorage.getItem('conversations');\n    console.log(savedConversations);\n    if (savedConversations) {\n      const parsedConversations = JSON.parse(savedConversations, (key, value) => {\n        if (key === 'lastUpdated') {\n          return new Date(value);\n        }\n        return value;\n      });\n      setConversations(parsedConversations);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('conversations', JSON.stringify(conversations, (key, value) => {\n      if (key === 'lastUpdated') {\n        return value;\n      }\n      return value;\n    }));\n  }, [conversations]);\n\n  const handleSubmit = (input: string) => {\n    if (input.trim()) {\n      const newMessage: MessageType = { text: input, isUser: true };\n      const currentTime = new Date();\n      if (currentConversation) {\n        setConversations(prevConversations => \n          prevConversations.map(conv => \n            conv.id === currentConversation \n              ? { ...conv, messages: [...conv.messages, newMessage], lastUpdated: currentTime }\n              : conv\n          )\n        );\n        simulateAIResponse(currentConversation);\n      } else {\n        const newConversationId = Date.now().toString();\n        const newConversation: Conversation = {\n          id: newConversationId,\n          title: input.slice(0, 30),\n          messages: [newMessage],\n          lastUpdated: currentTime\n        };\n        setConversations(prev => [...prev, newConversation]);\n        setCurrentConversation(newConversationId);\n        simulateAIResponse(newConversationId);\n      }\n      setShowHome(false);\n    }\n  };\n\n  const simulateAIResponse = (convId: string) => {\n    setTimeout(() => {\n      const aiResponse: MessageType = { text: \"This is a simulated AI response.\", isUser: false };\n      const currentTime = new Date();\n      setConversations(prevConversations => \n        prevConversations.map(conv => \n          conv.id === convId \n            ? { ...conv, messages: [...conv.messages, aiResponse], lastUpdated: currentTime }\n            : conv\n        )\n      );\n    }, 1000);\n  };\n\n  const startNewChat = () => {\n    setCurrentConversation(null);\n    setShowHome(true);\n  };\n\n  const selectConversation = (id: string) => {\n    setCurrentConversation(id);\n    setShowHome(false);\n  };\n\n  return (\n    <div className={`flex h-screen overflow-hidden ${theme === 'dark' ? 'bg-gray-900' : 'bg-white'}`}>\n      <Sidebar \n        conversations={conversations}\n        currentConversation={currentConversation}\n        startNewChat={startNewChat}\n        selectConversation={selectConversation}\n      />\n      <div className=\"flex-1 flex flex-col\">\n        {showHome \n          ? <Home /> \n          : <CurrentConversation \n              conversation={conversations.find(conv => conv.id === currentConversation)}\n            />\n        }\n        <MessageInput onSubmit={handleSubmit} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}