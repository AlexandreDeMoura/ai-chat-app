{"ast":null,"code":"var _jsxFileName = \"/Users/alexandredemoura/Desktop/dev/ai-chat-app/client/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport Sidebar from './components/Sidebar';\nimport Home from './screens/Home';\nimport CurrentConversation from './screens/CurrentConversations';\nimport MessageInput from './components/MessageInput';\nimport { ThemeContext } from './context/ThemeContext';\nimport { AuthContext } from './AuthContext';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const {\n    theme\n  } = useContext(ThemeContext);\n  const {\n    user,\n    getToken,\n    loading\n  } = useContext(AuthContext);\n  const [conversations, setConversations] = useState([]);\n  const [currentConversation, setCurrentConversation] = useState(null);\n  const [showHome, setShowHome] = useState(true);\n  useEffect(() => {\n    if (user && !loading) {\n      fetchConversations();\n    }\n  }, [user, loading]);\n  const fetchConversations = async () => {\n    try {\n      const token = await getToken();\n      const response = await axios.get('/api/conversations', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setConversations(response.data);\n    } catch (error) {\n      console.error('Error fetching conversations:', error);\n    }\n  };\n  const handleSubmit = async input => {\n    if (input.trim()) {\n      const newMessage = {\n        text: input,\n        isUser: true\n      };\n      const currentTime = new Date();\n      const token = await getToken();\n      if (currentConversation) {\n        try {\n          const response = await axios.put(`/api/conversations/${currentConversation}`, {\n            messages: [...conversations.find(conv => conv.id === currentConversation).messages, newMessage],\n            lastUpdated: currentTime\n          }, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          setConversations(prevConversations => prevConversations.map(conv => conv.id === currentConversation ? response.data : conv));\n        } catch (error) {\n          console.error('Error updating conversation:', error);\n        }\n        simulateAIResponse(currentConversation);\n      } else {\n        try {\n          const response = await axios.post('/api/conversations', {\n            title: input.slice(0, 30),\n            messages: [newMessage],\n            lastUpdated: currentTime\n          }, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          setConversations(prev => [...prev, response.data]);\n          setCurrentConversation(response.data.id);\n          simulateAIResponse(response.data.id);\n        } catch (error) {\n          console.error('Error creating conversation:', error);\n        }\n      }\n      setShowHome(false);\n    }\n  };\n  const simulateAIResponse = async convId => {\n    setTimeout(async () => {\n      const aiResponse = {\n        text: \"This is a simulated AI response.\",\n        isUser: false\n      };\n      const currentTime = new Date();\n      const token = await getToken();\n      try {\n        const response = await axios.put(`/api/conversations/${convId}`, {\n          messages: [...conversations.find(conv => conv.id === convId).messages, aiResponse],\n          lastUpdated: currentTime\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setConversations(prevConversations => prevConversations.map(conv => conv.id === convId ? response.data : conv));\n      } catch (error) {\n        console.error('Error updating conversation with AI response:', error);\n      }\n    }, 1000);\n  };\n  const startNewChat = () => {\n    setCurrentConversation(null);\n    setShowHome(true);\n  };\n  const selectConversation = id => {\n    setCurrentConversation(id);\n    setShowHome(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `flex h-screen overflow-hidden ${theme === 'dark' ? 'bg-gray-900' : 'bg-white'}`,\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      conversations: conversations,\n      currentConversation: currentConversation,\n      startNewChat: startNewChat,\n      selectConversation: selectConversation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 flex flex-col\",\n      children: [showHome ? /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(CurrentConversation, {\n        conversation: conversations.find(conv => conv.id === currentConversation)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        onSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"bhbAmehw0APY7xNNfyyqPB1zQqk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useContext","Sidebar","Home","CurrentConversation","MessageInput","ThemeContext","AuthContext","axios","jsxDEV","_jsxDEV","App","_s","theme","user","getToken","loading","conversations","setConversations","currentConversation","setCurrentConversation","showHome","setShowHome","fetchConversations","token","response","get","headers","Authorization","data","error","console","handleSubmit","input","trim","newMessage","text","isUser","currentTime","Date","put","messages","find","conv","id","lastUpdated","prevConversations","map","simulateAIResponse","post","title","slice","prev","convId","setTimeout","aiResponse","startNewChat","selectConversation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","conversation","onSubmit","_c","$RefreshReg$"],"sources":["/Users/alexandredemoura/Desktop/dev/ai-chat-app/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { Conversation, Message as MessageType } from './types/types';\nimport Sidebar from './components/Sidebar';\nimport Home from './screens/Home';\nimport CurrentConversation from './screens/CurrentConversations';\nimport MessageInput from './components/MessageInput';\nimport { ThemeContext } from './context/ThemeContext';\nimport { AuthContext } from './AuthContext';\nimport axios from 'axios';\n\nconst App: React.FC = () => {\n  const { theme } = useContext(ThemeContext);\n  const { user, getToken, loading } = useContext(AuthContext);\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [currentConversation, setCurrentConversation] = useState<string | null>(null);\n  const [showHome, setShowHome] = useState(true);\n\n  useEffect(() => {\n    if (user && !loading) {\n      fetchConversations();\n    }\n  }, [user, loading]);\n\n  const fetchConversations = async () => {\n    try {\n      const token = await getToken();\n      const response = await axios.get('/api/conversations', {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setConversations(response.data);\n    } catch (error) {\n      console.error('Error fetching conversations:', error);\n    }\n  };\n\n  const handleSubmit = async (input: string) => {\n    if (input.trim()) {\n      const newMessage: MessageType = { text: input, isUser: true };\n      const currentTime = new Date();\n      const token = await getToken();\n      if (currentConversation) {\n        try {\n          const response = await axios.put(`/api/conversations/${currentConversation}`, {\n            messages: [...conversations.find(conv => conv.id === currentConversation)!.messages, newMessage],\n            lastUpdated: currentTime\n          }, {\n            headers: { Authorization: `Bearer ${token}` }\n          });\n          setConversations(prevConversations =>\n            prevConversations.map(conv =>\n              conv.id === currentConversation\n                ? response.data\n                : conv\n            )\n          );\n        } catch (error) {\n          console.error('Error updating conversation:', error);\n        }\n        simulateAIResponse(currentConversation);\n      } else {\n        try {\n          const response = await axios.post('/api/conversations', {\n            title: input.slice(0, 30),\n            messages: [newMessage],\n            lastUpdated: currentTime\n          }, {\n            headers: { Authorization: `Bearer ${token}` }\n          });\n          setConversations(prev => [...prev, response.data]);\n          setCurrentConversation(response.data.id);\n          simulateAIResponse(response.data.id);\n        } catch (error) {\n          console.error('Error creating conversation:', error);\n        }\n      }\n      setShowHome(false);\n    }\n  };\n\n  const simulateAIResponse = async (convId: string) => {\n    setTimeout(async () => {\n      const aiResponse: MessageType = { text: \"This is a simulated AI response.\", isUser: false };\n      const currentTime = new Date();\n      const token = await getToken();\n      try {\n        const response = await axios.put(`/api/conversations/${convId}`, {\n          messages: [...conversations.find(conv => conv.id === convId)!.messages, aiResponse],\n          lastUpdated: currentTime\n        }, {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        setConversations(prevConversations =>\n          prevConversations.map(conv =>\n            conv.id === convId\n              ? response.data\n              : conv\n          )\n        );\n      } catch (error) {\n        console.error('Error updating conversation with AI response:', error);\n      }\n    }, 1000);\n  };\n\n  const startNewChat = () => {\n    setCurrentConversation(null);\n    setShowHome(true);\n  };\n\n  const selectConversation = (id: string) => {\n    setCurrentConversation(id);\n    setShowHome(false);\n  };\n\n  return (\n    <div className={`flex h-screen overflow-hidden ${theme === 'dark' ? 'bg-gray-900' : 'bg-white'}`}>\n      <Sidebar\n        conversations={conversations}\n        currentConversation={currentConversation}\n        startNewChat={startNewChat}\n        selectConversation={selectConversation}\n      />\n      <div className=\"flex-1 flex flex-col\">\n        {showHome\n          ? <Home />\n          : <CurrentConversation\n            conversation={conversations.find(conv => conv.id === currentConversation)}\n          />\n        }\n        <MessageInput onSubmit={handleSubmit} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}