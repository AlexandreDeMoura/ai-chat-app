{"ast":null,"code":"import i18next from 'i18next';\nfunction handleDatesCategorization(conversations) {\n  const t = i18next.t.bind(i18next);\n  const now = new Date();\n  const categories = {\n    [t('sidebar.today', 'Today')]: [],\n    [t('sidebar.yesterday', 'Yesterday')]: [],\n    [t('sidebar.last7Days', 'Last 7 days')]: [],\n    [t('sidebar.last30Days', 'Last 30 days')]: [],\n    [t('sidebar.older', 'Older')]: []\n  };\n\n  // Add month categories for the last 12 months\n  for (let i = 0; i < 12; i++) {\n    const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n    const monthYear = t('date.monthYear', '{{month}} {{year}}', {\n      month: t(`months.${date.getMonth()}`),\n      year: date.getFullYear()\n    });\n    categories[monthYear] = [];\n  }\n  conversations.forEach(conv => {\n    const lastUpdated = new Date(conv.lastUpdated);\n    const diffDays = Math.floor((now.getTime() - lastUpdated.getTime()) / (1000 * 3600 * 24));\n    const diffMonths = (now.getFullYear() - lastUpdated.getFullYear()) * 12 + now.getMonth() - lastUpdated.getMonth();\n    if (diffDays === 0) {\n      categories[t('sidebar.today', 'Today')].push(conv);\n    } else if (diffDays === 1) {\n      categories[t('sidebar.yesterday', 'Yesterday')].push(conv);\n    } else if (diffDays <= 7) {\n      categories[t('sidebar.last7Days', 'Last 7 days')].push(conv);\n    } else if (diffDays <= 30) {\n      categories[t('sidebar.last30Days', 'Last 30 days')].push(conv);\n    } else if (diffMonths < 12) {\n      const monthYear = t('date.monthYear', '{{month}} {{year}}', {\n        month: t(`months.${lastUpdated.getMonth()}`),\n        year: lastUpdated.getFullYear()\n      });\n      categories[monthYear].push(conv);\n    } else {\n      categories[t('sidebar.older', 'Older')].push(conv);\n    }\n  });\n\n  // Sort conversations within each category\n  Object.values(categories).forEach(categoryConvs => {\n    categoryConvs.sort((a, b) => new Date(b.lastUpdated).getTime() - new Date(a.lastUpdated).getTime());\n  });\n\n  // Filter out empty categories and sort them\n  const sortedCategories = Object.entries(categories).filter(([_, convs]) => convs.length > 0).sort(([a], [b]) => {\n    const order = [t('sidebar.today', 'Today'), t('sidebar.yesterday', 'Yesterday'), t('sidebar.last7Days', 'Last 7 days'), t('sidebar.last30Days', 'Last 30 days')];\n    const aIndex = order.indexOf(a);\n    const bIndex = order.indexOf(b);\n    if (aIndex !== -1 && bIndex !== -1) return aIndex - bIndex;\n    if (aIndex !== -1) return -1;\n    if (bIndex !== -1) return 1;\n    if (a === t('sidebar.older', 'Older')) return 1;\n    if (b === t('sidebar.older', 'Older')) return -1;\n    return new Date(b.split(' ')[1]).getTime() - new Date(a.split(' ')[1]).getTime();\n  });\n  return sortedCategories;\n}\nexport default handleDatesCategorization;","map":{"version":3,"names":["i18next","handleDatesCategorization","conversations","t","bind","now","Date","categories","i","date","getFullYear","getMonth","monthYear","month","year","forEach","conv","lastUpdated","diffDays","Math","floor","getTime","diffMonths","push","Object","values","categoryConvs","sort","a","b","sortedCategories","entries","filter","_","convs","length","order","aIndex","indexOf","bIndex","split"],"sources":["/Users/alexandredemoura/Desktop/dev/ai-chat-app/client/src/utils/handleDatesCategorization.ts"],"sourcesContent":["import { Conversation } from '../types/types';\nimport i18next from 'i18next';\n\nfunction handleDatesCategorization(conversations: Conversation[]) {\n    const t = i18next.t.bind(i18next);\n    const now = new Date();\n    const categories: { [key: string]: Conversation[] } = {\n        [t('sidebar.today', 'Today')]: [],\n        [t('sidebar.yesterday', 'Yesterday')]: [],\n        [t('sidebar.last7Days', 'Last 7 days')]: [],\n        [t('sidebar.last30Days', 'Last 30 days')]: [],\n        [t('sidebar.older', 'Older')]: [],\n    };\n\n    // Add month categories for the last 12 months\n    for (let i = 0; i < 12; i++) {\n        const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n        const monthYear = t('date.monthYear', '{{month}} {{year}}', {\n            month: t(`months.${date.getMonth()}`),\n            year: date.getFullYear()\n        });\n        categories[monthYear] = [];\n    }\n\n    conversations.forEach(conv => {\n        const lastUpdated = new Date(conv.lastUpdated);\n        const diffDays = Math.floor((now.getTime() - lastUpdated.getTime()) / (1000 * 3600 * 24));\n        const diffMonths = (now.getFullYear() - lastUpdated.getFullYear()) * 12 + now.getMonth() - lastUpdated.getMonth();\n        \n        if (diffDays === 0) {\n            categories[t('sidebar.today', 'Today')].push(conv);\n        } else if (diffDays === 1) {\n            categories[t('sidebar.yesterday', 'Yesterday')].push(conv);\n        } else if (diffDays <= 7) {\n            categories[t('sidebar.last7Days', 'Last 7 days')].push(conv);\n        } else if (diffDays <= 30) {\n            categories[t('sidebar.last30Days', 'Last 30 days')].push(conv);\n        } else if (diffMonths < 12) {\n            const monthYear = t('date.monthYear', '{{month}} {{year}}', {\n                month: t(`months.${lastUpdated.getMonth()}`),\n                year: lastUpdated.getFullYear()\n            });\n            categories[monthYear].push(conv);\n        } else {\n            categories[t('sidebar.older', 'Older')].push(conv);\n        }\n    });\n\n    // Sort conversations within each category\n    Object.values(categories).forEach(categoryConvs => {\n        categoryConvs.sort((a, b) => new Date(b.lastUpdated).getTime() - new Date(a.lastUpdated).getTime());\n    });\n\n    // Filter out empty categories and sort them\n    const sortedCategories = Object.entries(categories)\n        .filter(([_, convs]) => convs.length > 0)\n        .sort(([a], [b]) => {\n            const order = [t('sidebar.today', 'Today'), t('sidebar.yesterday', 'Yesterday'), t('sidebar.last7Days', 'Last 7 days'), t('sidebar.last30Days', 'Last 30 days')];\n            const aIndex = order.indexOf(a);\n            const bIndex = order.indexOf(b);\n            if (aIndex !== -1 && bIndex !== -1) return aIndex - bIndex;\n            if (aIndex !== -1) return -1;\n            if (bIndex !== -1) return 1;\n            if (a === t('sidebar.older', 'Older')) return 1;\n            if (b === t('sidebar.older', 'Older')) return -1;\n            return new Date(b.split(' ')[1]).getTime() - new Date(a.split(' ')[1]).getTime();\n        });\n\n    return sortedCategories;\n}\n\nexport default handleDatesCategorization;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}