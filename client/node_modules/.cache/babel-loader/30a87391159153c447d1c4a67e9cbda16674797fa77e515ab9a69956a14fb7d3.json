{"ast":null,"code":"var _jsxFileName = \"/Users/alexandredemoura/Desktop/dev/ai-chat-app/client/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport Sidebar from './components/Sidebar';\nimport Home from './screens/Home';\nimport CurrentConversation from './screens/CurrentConversations';\nimport MessageInput from './components/MessageInput';\nimport { ThemeContext } from './context/ThemeContext';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const {\n    theme\n  } = useContext(ThemeContext);\n  const {\n    user,\n    getToken,\n    loading,\n    conversations,\n    updateConversations,\n    addConversation\n  } = useContext(AuthContext);\n  const [currentConversation, setCurrentConversation] = useState(null);\n  const [showHome, setShowHome] = useState(true);\n  useEffect(() => {\n    if (user && !loading) {\n      fetchConversations();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user, loading]);\n  const fetchConversations = async () => {\n    try {\n      const token = await getToken();\n      if (!token) {\n        console.error('No token available');\n        return;\n      }\n      const response = await axios.get('/api/conversations', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      updateConversations(response.data);\n    } catch (error) {\n      console.error('Error fetching conversations:', error);\n    }\n  };\n  const handleSubmit = async input => {\n    if (input.trim()) {\n      const newMessage = {\n        text: input,\n        isUser: true\n      };\n      const currentTime = new Date();\n      const token = await getToken();\n      if (!token) {\n        console.error('No token available');\n        return;\n      }\n      if (currentConversation) {\n        // Update existing conversation\n        try {\n          const existingConversation = conversations.find(conv => conv.id === currentConversation);\n          if (!existingConversation) {\n            console.error('Conversation not found');\n            return;\n          }\n          const updatedMessages = [...existingConversation.messages, newMessage];\n          const response = await axios.put(`/api/conversations/${currentConversation}`, {\n            messages: updatedMessages,\n            lastUpdated: currentTime\n          }, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          updateConversations(conversations.map(conv => conv.id === currentConversation ? response.data : conv));\n        } catch (error) {\n          console.error('Error updating conversation:', error);\n          return;\n        }\n        simulateAIResponse(currentConversation);\n      } else {\n        // Create a new conversation\n        try {\n          const response = await axios.post('/api/conversations', {\n            title: input.slice(0, 30),\n            messages: [newMessage],\n            lastUpdated: currentTime\n          }, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          addConversation(response.data);\n          setCurrentConversation(response.data.id);\n          simulateAIResponse(response.data.id);\n        } catch (error) {\n          console.error('Error creating conversation:', error);\n          return;\n        }\n      }\n      setShowHome(false);\n    }\n  };\n  const simulateAIResponse = async convId => {\n    setTimeout(async () => {\n      const aiResponse = {\n        text: 'This is a simulated AI response.',\n        isUser: false\n      };\n      const currentTime = new Date();\n      const token = await getToken();\n      if (!token) {\n        console.error('No token available');\n        return;\n      }\n      try {\n        const existingConversation = conversations.find(conv => conv.id === convId);\n        if (!existingConversation) {\n          console.error('Conversation not found for AI response');\n          return;\n        }\n        const updatedMessages = [...existingConversation.messages, aiResponse];\n        const response = await axios.put(`/api/conversations/${convId}`, {\n          messages: updatedMessages,\n          lastUpdated: currentTime\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        updateConversations(conversations.map(conv => conv.id === convId ? response.data : conv));\n      } catch (error) {\n        console.error('Error updating conversation with AI response:', error);\n      }\n    }, 1000);\n  };\n  const startNewChat = () => {\n    setCurrentConversation(null);\n    setShowHome(true);\n  };\n  const selectConversation = id => {\n    setCurrentConversation(id);\n    setShowHome(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `flex h-screen overflow-hidden ${theme === 'dark' ? 'bg-gray-900' : 'bg-white'}`,\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      currentConversation: currentConversation,\n      startNewChat: startNewChat,\n      selectConversation: selectConversation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CurrentConversation, {\n      conversation: conversations.find(conv => conv.id === currentConversation) || undefined\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      onSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"JnndilXIz8+cn+1gltpgDOYYU1M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useContext","axios","Sidebar","Home","CurrentConversation","MessageInput","ThemeContext","AuthContext","jsxDEV","_jsxDEV","App","_s","theme","user","getToken","loading","conversations","updateConversations","addConversation","currentConversation","setCurrentConversation","showHome","setShowHome","fetchConversations","token","console","error","response","get","headers","Authorization","data","handleSubmit","input","trim","newMessage","text","isUser","currentTime","Date","existingConversation","find","conv","id","updatedMessages","messages","put","lastUpdated","map","simulateAIResponse","post","title","slice","convId","setTimeout","aiResponse","startNewChat","selectConversation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","conversation","undefined","onSubmit","_c","$RefreshReg$"],"sources":["/Users/alexandredemoura/Desktop/dev/ai-chat-app/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useContext, FC } from 'react';\nimport axios from 'axios';\nimport Sidebar from './components/Sidebar';\nimport Home from './screens/Home';\nimport CurrentConversation from './screens/CurrentConversations';\nimport MessageInput from './components/MessageInput';\nimport { ThemeContext } from './context/ThemeContext';\nimport { AuthContext, AuthContextType, AuthProvider } from './AuthContext';\nimport { Conversation, Message as MessageType } from './types/types';\n\nconst App: FC = () => {\n  const { theme } = useContext(ThemeContext);\n  const { user, getToken, loading, conversations, updateConversations, addConversation } = useContext(AuthContext) as AuthContextType;\n\n  const [currentConversation, setCurrentConversation] = useState<string | null>(null);\n  const [showHome, setShowHome] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (user && !loading) {\n      fetchConversations();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user, loading]);\n\n  const fetchConversations = async () => {\n    try {\n      const token = await getToken();\n      if (!token) {\n        console.error('No token available');\n        return;\n      }\n      const response = await axios.get<Conversation[]>('/api/conversations', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      updateConversations(response.data);\n    } catch (error) {\n      console.error('Error fetching conversations:', error);\n    }\n  };\n\n  const handleSubmit = async (input: string) => {\n    if (input.trim()) {\n      const newMessage: MessageType = { text: input, isUser: true };\n      const currentTime = new Date();\n      const token = await getToken();\n\n      if (!token) {\n        console.error('No token available');\n        return;\n      }\n\n      if (currentConversation) {\n        // Update existing conversation\n        try {\n          const existingConversation = conversations.find(\n            (conv) => conv.id === currentConversation\n          );\n          if (!existingConversation) {\n            console.error('Conversation not found');\n            return;\n          }\n\n          const updatedMessages = [...existingConversation.messages, newMessage];\n          const response = await axios.put<Conversation>(\n            `/api/conversations/${currentConversation}`,\n            {\n              messages: updatedMessages,\n              lastUpdated: currentTime,\n            },\n            {\n              headers: { Authorization: `Bearer ${token}` },\n            }\n          );\n          updateConversations(\n            conversations.map((conv) =>\n              conv.id === currentConversation ? response.data : conv\n            )\n          );\n        } catch (error) {\n          console.error('Error updating conversation:', error);\n          return;\n        }\n\n        simulateAIResponse(currentConversation);\n      } else {\n        // Create a new conversation\n        try {\n          const response = await axios.post<Conversation>(\n            '/api/conversations',\n            {\n              title: input.slice(0, 30),\n              messages: [newMessage],\n              lastUpdated: currentTime,\n            },\n            {\n              headers: { Authorization: `Bearer ${token}` },\n            }\n          );\n          addConversation(response.data);\n          setCurrentConversation(response.data.id);\n          simulateAIResponse(response.data.id);\n        } catch (error) {\n          console.error('Error creating conversation:', error);\n          return;\n        }\n      }\n\n      setShowHome(false);\n    }\n  };\n\n  const simulateAIResponse = async (convId: string) => {\n    setTimeout(async () => {\n      const aiResponse: MessageType = {\n        text: 'This is a simulated AI response.',\n        isUser: false,\n      };\n      const currentTime = new Date();\n      const token = await getToken();\n\n      if (!token) {\n        console.error('No token available');\n        return;\n      }\n\n      try {\n        const existingConversation = conversations.find(\n          (conv) => conv.id === convId\n        );\n        if (!existingConversation) {\n          console.error('Conversation not found for AI response');\n          return;\n        }\n\n        const updatedMessages = [\n          ...existingConversation.messages,\n          aiResponse,\n        ];\n        const response = await axios.put<Conversation>(\n          `/api/conversations/${convId}`,\n          {\n            messages: updatedMessages,\n            lastUpdated: currentTime,\n          },\n          {\n            headers: { Authorization: `Bearer ${token}` },\n          }\n        );\n        updateConversations(\n          conversations.map((conv) =>\n            conv.id === convId ? response.data : conv\n          )\n        );\n      } catch (error) {\n        console.error('Error updating conversation with AI response:', error);\n      }\n    }, 1000);\n  };\n\n  const startNewChat = () => {\n    setCurrentConversation(null);\n    setShowHome(true);\n  };\n\n  const selectConversation = (id: string) => {\n    setCurrentConversation(id);\n    setShowHome(false);\n  };\n\n  return (\n    <div\n      className={`flex h-screen overflow-hidden ${theme === 'dark' ? 'bg-gray-900' : 'bg-white'}`}\n    >\n      <Sidebar\n        currentConversation={currentConversation}\n        startNewChat={startNewChat}\n        selectConversation={selectConversation}\n      />\n      <Home />\n      <CurrentConversation\n        conversation={\n          conversations.find((conv) => conv.id === currentConversation) ||\n          undefined\n        }\n      />\n      <MessageInput onSubmit={handleSubmit} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}